#!/bin/bash

scenarioName=$1

#set the HOLOCHAIN_SYSTEM_BIN variable
. holochain.system.checkInstalled
#set the HOLOCHAIN_APPNAME and HOLOCHAIN_APPDIR variables
. holochain.app.findAppDir


export dockerBaseRun=" -e LOCAL_USER_ID=`id -u $USER` "
export LOCAL_USER_ID=`id -u $USER`

. $HOLOCHAIN_SYSTEM_BIN/app/createRuntime || exit 1

#creates a single script for each role in the testScenario, which is run by the respective container
$HOLOCHAIN_SYSTEM_BIN/app/testScenario.createClusterScripts $scenarioName

#begin log for this session
logFile=$HOLOCHAIN_APPDIR/logs/testScenario.$scenarioName.log
printf "########################################################################\n########################################################################\n########################################################################\n"
echo "HC: testScenario $scenarioName started `date`" | tee -a $HOLOCHAIN_APPDIR/logs/cluster.log


####docker stuff
mkdir -p "$HOLOCHAIN_APPDIR/runtime/docker" > /dev/null
#need to harlink the Dockerfile for docker security
ln $HOLOCHAIN_SYSTEM_BIN/../docker/app.docker/Dockerfile.chain.testing $HOLOCHAIN_APPDIR/runtime/docker/Dockerfile.chain.testing
#build the image to use as the base for the bs instance and hc instances
echo "docker build --no-cache -f $HOLOCHAIN_APPDIR/runtime/docker/Dockerfile.chain.testing -t chain.testing $HOLOCHAIN_APPDIR"
docker build --no-cache -f $HOLOCHAIN_APPDIR/runtime/docker/Dockerfile.chain.testing -t chain.testing $HOLOCHAIN_APPDIR


#TODO COMMENT AND MAKE WORK
$dockerComposeSystem=$HOLOCHAIN_SYSTEM_BIN/../docker/app/docker-compose.multiNodeSync.yml
$HOLOCHAIN_SYSTEM_BIN/app/runCluster $scenarioName $dockerComposeSystem $logFile
./test.hc.cluster.sync.test  hc.cluster.sync passed failed 5 "hc.cluster.sync 5 instances" && echo "--- passed" || echo "--- failed"
